'use client'

import { Order } from "@/shared/types/global";
import { ChatCompletionMessageParam, InitProgressReport, MLCEngine } from "@mlc-ai/web-llm";
/**
 * The WebLLM engine.
 */
let engine: MLCEngine | null = null;
/**
 * The progress of the WebLLM engine.
 */
export type InitProgress = { percentage: number; text?: string };
/**
 * Initialize the WebLLM engine.
 * MLCEngine is used because we need to cancel downloading.
 * @param modelId The model ID.
 * @param onProgress The progress callback.
 * @returns The engine.
 */
export async function initWebLLM(
  modelId = "Llama-3.1-8B-Instruct-q4f32_1-MLC",
  onProgress?: (progress: InitProgress) => void
) {
  try {
    engine = new MLCEngine({
      initProgressCallback: (rep: InitProgressReport) => {
        const ratio = typeof rep === "number" 
          ? rep 
          : typeof rep?.progress === "number" 
            ? rep.progress 
            : 0;
        const text = typeof rep === "object" 
          ? rep.text 
          : undefined;
        onProgress?.({ percentage: Math.round(ratio * 100), text });
      },
    });
  } catch (e) {
    console.error(e);
    throw e;
  }
  return engine?.reload(modelId);
}
/**
 * Get the WebLLM engine.
 * @returns 
 */
export function getEngine() {
  if (!engine) throw new Error("WebLLM not initialized");
  return engine;
}
/**
 * Cancel the loading of the LLM model.
 */
export async function cancelLoading() {
  await engine?.unload();
  engine = null;
}
/**
 * Make speech text with LLM.
 * The sentence is generated by LLM.
 */
export class WebLLM {

  constructor() {
    if(process.env.NODE_ENV === 'development') {
      console.log('WebLLM.instance created');
    }
  }
  async makeSpeechText(order: Order): Promise<string> {
    const n = order.orderNum;
    const messages:ChatCompletionMessageParam[] = [
      { 
        role: "system", 
        content: [
          "You are a McDonald's assistant.",
          "User will provide an order number.",
          "You MUST call out EXACTLY the digits from the user's number (no other number).",
          "Output one short line in English, call the number once.",
          "The number should be read as is or read one digit at a time.",
          "Example format (placeholder): ",
          "- <n> Your order is ready.",
          "- Order <n>, please come to the counter.",
          "- Thanks for waitingâ€”order <n> is ready!",
          "- <n> ready! Counter pickup.",
          "- We are now serving order <n>.",
          "- Order <n> is available for pickup at the counter.",
          "",
          "Do not use the placeholder literally; replace <n> with the user's number."
        ].join(" ")
      },
      { role: "user", content: `order_number: ${n}` },
    ]
    
    const reply = await engine?.chat.completions.create({ 
      temperature: 0.4,
      messages 
    });

    const base = `${n}! ${n}! Your order is ready.`;
    return reply?.choices[0].message.content || base;
  }
}